name: CI and CD
on:
  push:
    branches:
      - master
      - 'feature/**'
    paths:
     - java-sample-application/source-code/productcatalogue/**
  pull_request:
    branches:
      - master
      - 'feature/**'
    paths:
      - java-sample-application/source-code/productcatalogue/**
jobs:
  compile:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [11]
    name: Java ${{ matrix.java }} compile
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-package: jdk
          java-version: ${{ matrix.java }}
      - name: Compile the Project
        run: mvn -B compile 
  security:
    needs: [compile]
    runs-on: ubuntu-latest
    if: contains(fromJson('["pull_request"]'), github.event_name )
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities (Monitor only)
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - name: Run Snyk to check for vulnerabilities (test)
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
  build_and_test:
    needs: [compile]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14
        server-id: github

        server-username: GITHUB_USER_REF  # env variable name for username

        server-password: GITHUB_TOKEN_REF
    - name: Check working directory
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      run: echo "${GITHUB_WORKSPACE}"
    - name: Extract Maven project version
      run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      id: project

    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v3 
      with:
        token: ${{secrets.github_token}}   
        
    - name: Build project with Maven
      run: | 
           mvn -B package --file pom.xml -Dmy_variable=${GITHUB_REPOSITORY}
      env:

          GITHUB_USER_REF: ${{ secrets.GIT_USERNAME }}

          GITHUB_TOKEN_REF: ${{ secrets.GIT_TOKEN }}

    - name: Test
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
    - name: Test Report
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      uses: phoenix-actions/test-reporting@v8
      id: test-report 
     # if: success() || failure()    # run this step even if previous step failed
      with:
        name: JEST Tests            # Name of the check run which will be created
        path: ${{ secrets.TEST_RESULT_PATH }}    # Path to test results
        reporter: java-junit       # Format of test results
        fail-on-error: 'false'
    - name: Read output variables
      run: |
         echo "url is ${{ steps.test-report.outputs.runHtmlUrl }}"
    - name: Publish Test Results for shopfront
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      uses: EnricoMi/publish-unit-test-result-action@v2
    #  if: always()
      with:
        junit_files: "${{ secrets.TEST_RESULT_PATH }}"

    - name: Build and analyze
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }} -Dsonar.qualitygate.wait=true -Pcoverage

    - name: Publish package on Github packages
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      run: | 
           mvn -B versions:set -DnewVersion=${{ steps.project.outputs.version }}.${{ steps.buildnumber.outputs.build_number }} -DgenerateBackupPoms=false -X
           mvn deploy -Dmy_variable=${GITHUB_REPOSITORY}
           mvn versions:revert
      env:
          
          GITHUB_USER_REF: ${{ secrets.GIT_USERNAME }}

          GITHUB_TOKEN_REF: ${{ secrets.GIT_TOKEN }}

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    
    - name: Build Docker container
      working-directory: ${{secrets.DOCKER_FILE_PATH_1 }}
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_1 }}:${{ github.sha }} .
    
    - name: Run Trivy vulnerability scanner for product
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_1 }}:${{ github.sha }}'
        format: 'template'
#        exit-code: '1'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - name: Upload trivy scan results to github security tab
    #  if: contains(fromJson('["pull_request"]'), github.event_name )
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Docker push
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_1 }}:${{ github.sha }}
    
    - name: release
      if: (github.ref == 'refs/heads/master')
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.project.outputs.version }}.${{ steps.buildnumber.outputs.build_number }}
        tag_name: "${{ github.ref }}-${{ secrets.IMAGE_NAME_1 }}-${{ steps.buildnumber.outputs.build_number }}"
      env:
        GITHUB_TOKEN: ${{ github.token }}
  
  docker-image-updtaer:
    needs: [build_and_test]
    uses: shehbaz-pathan/Inception-argo-demo/.github/workflows/docker-image-updater.yaml@master
    with:
      env: test
      destination-file: ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml

  slackNotification:
    needs: [compile,security,build_and_test,docker-image-updtaer]
    if: always()
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
    - uses: technote-space/workflow-conclusion-action@v3
    - name: Slack Notification success
      if: env.WORKFLOW_CONCLUSION == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: 'Success'
    - name: Slack Notification Failure
      if: env.WORKFLOW_CONCLUSION == 'failure'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: 'Failure'
         
   
     
  
